/**
 * 具有一个扇环的单点类型
 *
 * @param {String} label
 *        标签显示的文本
 *
 * @param {String} labelColor
 *        标签的颜色
 *
 * @param {String} labelPosition
 *        标签出现的位置，允许取值为：inside, left, top, right, bottom, auto
 *
 * @param {Number} pieInnerRadius
 *        半径大小
 *
 * @param {Number} pieOuterRadius
 *        扇环的大小
 *
 * @param {Number} pieAngle
 *        扇环的角度
 *
 * @param {String} pieColor
 *        扇环的颜色
 */
var HumanBody = kc.HumanBody = kity.createClass( "HumanBody", {

	base: kc.AnimatedChartElement,

	constructor: function ( param ) {
		var me = this;
		this.callBase( kity.Utils.extend( {}, param ) );
		//人体形状的路径数据
		var humanPath = "M66.413,33.82c2.6,1.759,3.775,2.555,6.02,4.074c-0.221-4.084,0.163-7.574-0.687-10.731 c-2.526-9.384,2.467-15.395,8.937-20.505c14.121-11.152,34.932-7.864,45.479,6.643c2.721,3.742,3,7.56,2.479,11.795 c-0.444,3.614-0.723,7.248-1.154,11.684c2.097-0.919,3.472-1.522,5.275-2.312c0,4.585,0.4,9.021-0.151,13.335 c-0.326,2.554-0.553,6.413-5.302,5.525c-0.53-0.099-1.872,1.786-2.111,2.905c-0.965,4.521-1.493,9.136-2.474,13.653 c-0.944,4.346,0.265,7.521,4.233,9.575c7.675,3.972,15.365,7.914,23.033,11.898c7.36,3.824,14.772,7.556,22.032,11.561 c9.874,5.447,13.075,14.752,13.179,25.185c0.079,7.958-1.065,15.92-1.353,23.892c-0.109,3.026,0.101,6.285,1.119,9.092 c4.399,12.131,9.725,23.955,13.54,36.255c2.009,6.477,2.267,13.713,2.161,20.588c-0.283,18.276-1.366,36.538-1.795,54.814 c-0.304,12.969,0.372,25.969-0.201,38.92c-0.453,10.237-5.577,18.637-13.128,25.502c-0.479,0.435-1.146,0.985-1.701,0.959 c-2.936-0.136-5.865-0.439-8.671-0.673c0.251-1.819,0.525-3.806,0.973-7.058c2.4-1.206,6.13-3.08,9.859-4.955 c-0.195-0.511-0.39-1.021-0.586-1.532c-2.306,0.183-4.612,0.366-6.918,0.549c-0.205-0.457-0.41-0.914-0.615-1.371 c1.955-0.884,3.865-1.891,5.875-2.625c3.389-1.238,5.049-3.582,5.143-7.149c0.085-3.239-1.221-5.312-5.345-6.175 c0.116,2.008,0.735,3.779,0.176,5.02c-0.997,2.212-2.705,4.102-4.116,6.127c-1.257-1.891-3.433-3.707-3.593-5.687 c-0.438-5.4-0.282-10.891,0.166-16.302c0.208-2.522,0.959-5.62,2.63-7.29c5.995-5.994,5.243-12.997,3.539-20.005 c-2.586-10.633-5.25-21.289-8.713-31.657c-3.596-10.767-4.07-21.79-4.842-32.897c-0.277-3.987-1.84-7.93-3.12-11.793 c-2.285-6.892-4.801-13.708-7.489-21.317c-0.862,2.708-1.534,4.943-2.283,7.153c-4.001,11.807-4.052,23.682-0.663,35.624 c0.091,0.32,0.24,0.659,0.209,0.973c-1.442,14.409,5.484,27.423,6.892,41.345c3.542,35.037,8.394,70.166,2.219,105.271 c-3.278,18.636-2.016,37.122-1.539,55.668c0.233,9.072,2.728,18.063,3.714,27.143c1.57,14.464-2.845,27.95-7.448,41.368 c-4.04,11.778-7.763,23.669-11.998,35.375c-5.436,15.028-1.417,28.913,4.459,42.67c0.652,1.526,1.584,2.932,2.235,4.458 c1.7,3.987,0.135,6.995-4.086,8.035c-6.125,1.51-12.156,3.955-18.645,1.669c-0.47-0.166-1.2,0.494-1.834,0.691 c-6.931,2.153-12.139-1.66-11.791-8.767c0.25-5.1,1.108-10.19,1.075-15.281c-0.063-9.783,2.329-19.017,4.953-28.329 c4.528-16.069,3.204-32.394,0.006-48.421c-2.435-12.204-0.727-23.608,2.384-35.345c1.464-5.523,1.434-11.851,0.451-17.532 c-2.542-14.689-6.193-29.184-8.972-43.837c-1.015-5.35-1.316-10.953-1.064-16.4c0.427-9.241-3.676-17.412-5.217-26.132 c-2.395-13.552-3.91-27.276-5.334-40.976c-0.891-8.569-1.148-9.101-9.8-7.17c-1.027,10.624-1.735,21.39-3.21,32.05 c-1.065,7.699-2.208,15.622-4.995,22.793c-4.456,11.469-1.873,23.401-3.939,34.931c-1.781,9.943-3.381,19.939-5.711,29.758 c-3.19,13.444-7.071,26.645-1.148,40.406c4.289,9.965,2.039,20.306,0.319,30.429c-3.169,18.655-2.725,36.903,3.116,55.158 c2.277,7.116,1.999,15.059,2.796,22.635c0.343,3.262,0.211,6.587,0.724,9.815c1.297,8.168-3.682,12.616-11.642,10.764 c-3.183-0.74-6.739,0.29-10.047-0.118c-4.374-0.539-8.879-1.202-12.879-2.882c-1.277-0.536-2.072-4.754-1.467-6.811 c2.88-9.798,6.648-19.342,9.366-29.179c0.858-3.104-0.042-6.994-1.028-10.256c-3.98-13.172-7.389-26.627-12.707-39.262 c-9.768-23.208-10.398-46.621-5.621-70.91c1.613-8.201,0.407-16.921,0.962-25.372c0.882-13.419-2.03-26.457-3.308-39.667 c-2.487-25.721-3.424-51.413,1.652-77.051c1.5-7.576,1.091-15.524,1.659-23.294c0.144-1.974,0.384-4.035,1.087-5.86 c6.23-16.181,4.655-33.63,8.015-50.317c1.232-6.122-2.224-13.206-3.635-19.831c-0.409-1.919-1.143-3.77-2.145-6.994 c-0.775,2.368-1.111,3.51-1.52,4.624c-2.5,6.821-5.335,13.542-7.405,20.491c-1.208,4.055-1.713,8.48-1.651,12.726 c0.227,15.451-5.006,29.676-9.081,44.218c-2.274,8.115-3.818,16.482-4.97,24.835c-0.379,2.747,0.772,6.373,2.501,8.608 c3.952,5.106,5.574,10.332,4.373,16.718c-0.469,2.494,0.621,5.25,0.379,7.828c-0.232,2.467-1.162,4.901-2.082,7.232 c-0.124,0.315-2.703,0.283-2.905-0.158c-1.012-2.205-1.667-4.585-2.326-6.937c-0.249-0.888-0.173-1.866-0.249-2.845 c-5.567,1.234-7.43,7.23-3.246,10.779c2.443,2.072,5.86,2.994,8.839,4.434c-0.104,0.396-0.207,0.791-0.311,1.187 c-2.241,0-4.481,0-6.722,0c-0.186,0.529-0.371,1.058-0.557,1.587c1.991,0.958,4.198,1.636,5.908,2.958 c1.534,1.186,7.224,0.073,3.337,5.104c-0.33,0.427,1.254,2.334,1.952,3.56c-8.428,2.195-16.162-1.858-20.203-11.677 c-2.098-5.098-3.479-10.821-3.678-16.316c-0.866-23.94-1.129-47.9-1.722-71.851c-0.21-8.482-1.177-16.968-0.957-25.43 c0.143-5.516,1.157-11.209,2.913-16.443c4.053-12.082,9.574-23.72,12.928-35.969c1.657-6.053,0.034-13.073-0.463-19.629 c-0.632-8.346-0.804-16.475,2.335-24.559c2.39-6.158,6.39-10.329,12.001-13.31c13.191-7.008,26.442-13.908,39.559-21.053 c9.679-5.273,9.916-6.244,6.937-17.06c-0.527-1.914-0.815-3.898-1.134-5.862c-0.435-2.671,0.935-6.697-4.532-5.383 c-0.528,0.127-2.271-2.393-2.49-3.83C67.346,45.224,67.036,40.28,66.413,33.82z";
		this.callBase( kity.Utils.extend( {}, param ) );
		this.name = new kity.Text().setTextAnchor( 'middle' ).translate( 128, 160 );
		this.canvas.addShape( this.name );
		this.stack = new kity.Group();
		this.canvas.addShape( this.stack.translate( -2, 0 ) );
		//var clipPath = "M123.893,104.331c0.478-0.884,0.558-1.392,0.775-1.539c14.871-10.084,20.279-24.838,20.681-41.415 c0.446-18.406,0.135-36.902,0.055-55.317c-0.009-1.997-0.665-3.407-1.02-6.06H0.097L0,71.053 c4.014,13.159,10.043,25.321,22.562,33.278";
		var innerPath = new kity.Path().translate( 2, 0 ).setPathData( humanPath );
		this.inner = new kity.Clip();
		this.inner.addShape( innerPath );
		this.ripple = new kity.Path();
	},
	registerUpdateRules: function () {
		return kity.Utils.extend( this.callBase(), {
			'updateAll': [ 'name', 'constituent', 'colors', 'chart' ]
		} );
	},
	updateAll: function ( name, constituent, colors, chart ) {
		this.chart = chart;
		this._name = name;
		chart.paper.addResource( this.inner );
		this.name.setContent( name );
		var stack = this.stack.clear();
		var deep = 582,
			width = 203;
		var count = 0;
		var totalpercent = 0;
		var height, color, t;
		for ( var i = 0; i <= constituent.length; i++ ) {
			if ( i === constituent.length ) {
				if ( totalpercent === 1 ) {
					break;
				} else {
					height = 220 - count;
					color = 'white';
					t = null;
				}
			} else {
				var con = constituent[ i ];
				totalpercent += con.percent;
				height = deep * con.percent;
				color = colors[ con.name ];
				t = new kity.Text( parseInt( con.percent * 100 ) + '%' + con.name );
			}
			var transY = deep - height - count;
			var s = new kity.Rect().setWidth( width ).setHeight( height ).translate( 0, transY ).fill( color );
			stack.addShape( s );
			if ( i === 0 ) {
				this.stacktop = s; //记录最顶端的那个
			}
			if ( t ) {
				this.canvas.addShape( t );
				t.translate( width, transY + height / 2 + t.getHeight() / 2 ).fill( 'white' );
			}
			count += height;
		}
		//console.log( stack.clipWith );
		stack.clipWith( this.inner );
	},
	getAnimatedParam: function () {
		return [ 'x', 'y' ];
	}
} );